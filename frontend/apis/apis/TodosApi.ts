/* tslint:disable */
/* eslint-disable */
/**
 * (title)
 * A sample service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { DeleteTodoResponse, FetchTodosResponse, PostAuthSignIn500Response, ShowTodoResponse, StoreTodoInput, StoreTodoResponse } from "../models/index";
import {
  DeleteTodoResponseFromJSON,
  DeleteTodoResponseToJSON,
  FetchTodosResponseFromJSON,
  FetchTodosResponseToJSON,
  PostAuthSignIn500ResponseFromJSON,
  PostAuthSignIn500ResponseToJSON,
  ShowTodoResponseFromJSON,
  ShowTodoResponseToJSON,
  StoreTodoInputFromJSON,
  StoreTodoInputToJSON,
  StoreTodoResponseFromJSON,
  StoreTodoResponseToJSON,
} from "../models/index";

export interface DeleteTodoRequest {
  id: string;
}

export interface GetTodoRequest {
  id: string;
}

export interface PostTodosRequest {
  storeTodoInput: StoreTodoInput;
}

export interface PutTodoRequest {
  id: string;
  storeTodoInput: StoreTodoInput;
}

/**
 *
 */
export class TodosApi extends runtime.BaseAPI {
  /**
   * Delete Todo
   */
  async deleteTodoRaw(requestParameters: DeleteTodoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteTodoResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError("id", 'Required parameter "id" was null or undefined when calling deleteTodo().');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/todos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => DeleteTodoResponseFromJSON(jsonValue));
  }

  /**
   * Delete Todo
   */
  async deleteTodo(requestParameters: DeleteTodoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteTodoResponse> {
    const response = await this.deleteTodoRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Show Todo
   */
  async getTodoRaw(requestParameters: GetTodoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowTodoResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError("id", 'Required parameter "id" was null or undefined when calling getTodo().');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/todos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ShowTodoResponseFromJSON(jsonValue));
  }

  /**
   * Show Todo
   */
  async getTodo(requestParameters: GetTodoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowTodoResponse> {
    const response = await this.getTodoRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Fetch Todos
   */
  async getTodosRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchTodosResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/todos/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FetchTodosResponseFromJSON(jsonValue));
  }

  /**
   * Fetch Todos
   */
  async getTodos(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchTodosResponse> {
    const response = await this.getTodosRaw(initOverrides);
    return await response.value();
  }

  /**
   * Create Todo Schema
   */
  async postTodosRaw(requestParameters: PostTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreTodoResponse>> {
    if (requestParameters["storeTodoInput"] == null) {
      throw new runtime.RequiredError("storeTodoInput", 'Required parameter "storeTodoInput" was null or undefined when calling postTodos().');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/todos/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: StoreTodoInputToJSON(requestParameters["storeTodoInput"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StoreTodoResponseFromJSON(jsonValue));
  }

  /**
   * Create Todo Schema
   */
  async postTodos(requestParameters: PostTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreTodoResponse> {
    const response = await this.postTodosRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update Todo
   */
  async putTodoRaw(requestParameters: PutTodoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreTodoResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError("id", 'Required parameter "id" was null or undefined when calling putTodo().');
    }

    if (requestParameters["storeTodoInput"] == null) {
      throw new runtime.RequiredError("storeTodoInput", 'Required parameter "storeTodoInput" was null or undefined when calling putTodo().');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/todos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: StoreTodoInputToJSON(requestParameters["storeTodoInput"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StoreTodoResponseFromJSON(jsonValue));
  }

  /**
   * Update Todo
   */
  async putTodo(requestParameters: PutTodoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreTodoResponse> {
    const response = await this.putTodoRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
